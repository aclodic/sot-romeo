# -*- coding: utf-8 -*-
# Copyright 2011, Florent Lamiraux, Thomas Moulard, JRL, CNRS/AIST
#
# This file is part of dynamic-graph.
# dynamic-graph is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# dynamic-graph is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# dynamic-graph. If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import numpy as np
from dynamic_graph.sot.core import \
    FeatureGeneric, FeatureJointLimits, Task, Constraint, GainAdaptive, SOT
from dynamic_graph.sot.dynamics import AngleEstimator
from dynamic_graph import enableTrace, plug
from dynamic_graph.sot.tools.se3 import SE3, R3, SO3
import numpy as np

from dynamic_graph.sot.dynamics.humanoid_robot import AbstractHumanoidRobot
from dynamic_graph.sot.dynamics import Dynamic

romeo_pkgdatarootdir = "@ROMEO_PKGDATAROOTDIR@/romeo"

class Robot (AbstractHumanoidRobot):
    """
    This class instanciates Aldebaran Romeo robot
    """
    halfSitting = (
        
        0, 0, 0.840252, 0, 0, 0,                         # Free flyer
        0,                                               # chest
        0, 0, 0, 0,                                      # head
        1.5, 0.6, -0.5, -1.05, -0.4, -0.3, -0.2,         # left arm   
        1.5, -0.6, 0.5, 1.05, -0.4, -0.3, -0.2,          # right arm  
        0, 0, -0.3490658, 0.6981317, -0.3490658, 0, 0,   # left leg   
        0, 0, -0.3490658, 0.6981317, -0.3490658, 0, 0, ) # right leg  

#    def smallToFull(self, config):
#        res = (config + 12*(0.,))
#        return res

    def __init__(self, name, 
                 modelDir = romeo_pkgdatarootdir,
                 xmlDir = romeo_pkgdatarootdir,
                 device = None,
                 dynamicType = Dynamic,
                 tracer = None):
        AbstractHumanoidRobot.__init__ (self, name, tracer)

        self.OperationalPoints.append('waist')
        self.OperationalPoints.append('chest')
        self.device = device
        self.modelDir = modelDir
        self.modelName = 'Romeo.wrl'
        self.specificitiesPath = xmlDir + '/RomeoSpecificities.xml'
        self.jointRankPath = xmlDir + '/RomeoLinkJointRank.xml'

        self.dynamic = self.loadModelFromJrlDynamics(
            self.name + '_dynamic',
            modelDir,
            self.modelName,
            self.specificitiesPath,
            self.jointRankPath,
            dynamicType)

        self.dimension = self.dynamic.getDimension()
        print (self.dimension)
        if self.dimension != len(self.halfSitting):
            raise RuntimeError("invalid half-sitting pose")
        self.initializeRobot()

# TODO: ??
# __all__ = [Romeo]

